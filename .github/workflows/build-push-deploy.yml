name: CI/CD Django + Flutter

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lowercase IMAGE_NAME
        run: |
          echo "IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      VM_IP:      ${{ secrets.VM_IP }}
      VM_PORT:    ${{ secrets.VM_PORT }}
      VM_USER:    ${{ secrets.VM_USER }}
      GHCR_USER:  ${{ github.actor }}
      GHCR_PAT:   ${{ secrets.GITHUB_TOKEN }}
      IMAGE_NAME: ${{ env.IMAGE_NAME }}

    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no \
              -p "$VM_PORT" \
              "$VM_USER@$VM_IP" << 'EOF'
            set -e

            cd /opt/mylessons

            # — keep your on-disk repo in sync —
            git remote set-url origin https://${GHCR_USER}:${GHCR_PAT}@github.com/${GHCR_USER}/MyLessons-Project.git
            git fetch --depth=1 origin main
            git reset --hard FETCH_HEAD

            # — Docker login & cleanup —
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            docker container prune -f       # drop stopped containers
            docker image prune -af          # drop unused images & build cache

            # — fetch fresh image & deploy —
            docker pull ${IMAGE_NAME}:latest
            docker compose up -d --remove-orphans --no-build

            # — sanity-check logs —
            docker compose logs --tail=50
          EOF
