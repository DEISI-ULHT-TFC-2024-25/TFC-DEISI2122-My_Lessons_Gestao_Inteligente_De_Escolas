name: CI/CD Django + Flutter


# ─── Grant the token permission to push to GHCR ───────────────────────────────
permissions:
  contents: read     # (you usually only need to read the repo)
  packages: write    # ← this unlocks docker push to ghcr.io


on:
  push:
    branches:
      - main       # deploy para produção
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lowercase IMAGE_NAME
        run: |
          echo "IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start SSH agent and load key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Set GHCR credentials
        run: |
          echo "GHCR_USER=${{ github.actor }}"  >> $GITHUB_ENV
          echo "GHCR_PAT=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Deploy via SSH
        env:
          VM_IP: ${{ secrets.VM_IP }}
          VM_PORT: ${{ secrets.VM_PORT }}
          VM_USER: ${{ secrets.VM_USER }}
          GHCR_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -p "$VM_PORT" \
              "$VM_USER"@"$VM_IP" << EOF
            set -e

            cd /opt/mylessons

            # 1) Switch origin from SSH to HTTPS including your token:
            git remote set-url origin https://${GHCR_USER}:${GHCR_PAT}@github.com/${GHCR_USER}/MyLessons-Project.git

            # 2) Fetch & reset to main (hard reset avoids merge hassles)
            git fetch --depth=1 origin main
            git reset --hard FETCH_HEAD

            # 3) Docker-login and redeploy
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            docker-compose -f docker-compose.prod.yml logs --tail=50
          EOF
